{
  "hash": "df55f310cba94684c9b2cd7d573deb57",
  "result": {
    "engine": "jupyter",
    "markdown": "# Introduction to Python\n\n## What is Python?\n\nPython is a prerequisite for programming experiments in oTree. However, it is much bigger than that. It is one of the most popular general-purpose programming languages in the world. Arguably, its success partially lies in its simplicity. And that is good news for us!\n\n::: {#fig-python-logo}\n![](2023-09-23-22-43-08.png){width=50%}\n\nPython Logo\n:::\n\nAnother good news is that, Python has a fantastic ecosystem of libraries. This means that it is not necessary to reinvent the wheel each time. For instance if you'd like to use a specific algorithm, (let's say you  have an experiment where you match people and places according to their prefences, using *deferred acceptance algorithm*, you can find several packages for that. \n\n\nJust to whet your appetite, here are some things you can do with Python:\n- Data cleaning, data analysis, statistical modelling\n- Machine Learning applications\n- Agent-Based Modelling\n- Web Scraping\n- Building web and desktop applications\n\n\nSo if you are learning Python for the first time, I'd say this is a very good investment. I hope you'll enjoy it. In this book, however, we will focus on a small subset of Python features that are necessary for us to build experiments and that will be sufficent. So if you like to learn further and expand your Python superpowers, there are many great sources online to learn Python, depending on the path you'd like to follow.\n\n## How to interact with Python?\n\n### Option 1: Python Interpreter\nPython, in its core, is a command-line interpreter. This means that you can write Python code in a text editor and run it from the terminal. For instance, you can write a Python script in a text editor, save it as `my_python_file.py`[^python-extension] and run it from the terminal by typing `python my_python_file.py`[^command-helloworld].\n\n[^python-extension]: Python scripts take the extension `.py`. You are free to choose the name before the extension for regular Python files. (In oTree we will have a certain structure and naming convention for our Python files though. But don't worry about that for now.)\n\n[^command-helloworld]: If you have Python installed on your computer and you are an impatient person in general, you can go ahead and try this. Create a file called `my_python_file.py` with a single line: `print(\"Hello World!\")`. Then run it from the terminal by typing `python my_python_file.py`. You should see `Hello World!` printed in the terminal. \n\n::: {#fig-python-interpreter}\n![](2023-09-23-23-16-55.png)\n:::\n\n\n### Option 3: Development Environment\n\n\n**2- Running a Python Script from the Terminal**\n\n- Python scripts have the extension `.py`\n\n**3- Using a development environment**\n\n* Some of them are `PyCharm`, `VSCode`, `RStudio` and so on.\n\n* Usually `Shift + Enter` or `Ctrl + Enter` to send the command to shell\n\n**4- Jupyter Notebook**\n\n* Browser environment for writing and running interactive Python code.\n\n* You can combine text and code cells to create a notebook.\n\n| Keyboard Shortcut | Description |\n| ---------------- | ----------- |\n| `Shift + Enter`  | Send the cell to the kernel for execution |\n| `Ctrl + Enter`   | Run the cell and advance to the next cell |\n| `Enter`          | Edit the cell           |\n| `Esc`            | Stop Editing the cell   |\n| `H`              | Help                    |\n| `M`              | Cell to Markdown (text) |\n| `Y`              | Cell to code            |\n:::\n\n\n## Hello World!\n\n* To print things in the console, one should use `print()` function. \n* Let's go ahead and print `Hello World`:\n\n::: {#1e16c2cc .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello World!\n```\n:::\n:::\n\n\n",
    "supporting": [
      "python-intro_files"
    ],
    "filters": [],
    "includes": {}
  }
}